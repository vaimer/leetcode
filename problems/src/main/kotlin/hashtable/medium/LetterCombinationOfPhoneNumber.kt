package hashtable.medium

/**
 * Problem: 17. Letter Combinations of a Phone Number
 * Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent. Return the answer in any order.
 *
 * A mapping of digits to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.
 * 
 * Solution:
 * The letterCombinations function is the main function that takes a string of digits and returns a list of all possible letter combinations. It first checks if the input string digits is empty. If it is, the function returns an empty list
 * The backtracking function is a recursive helper function that generates the letter combinations. It takes four parameters: the result list, the currentString builder, the input digits, and the current index in the digits string. If the length of currentString equals the length of digits, it means a complete combination has been formed, and it is added to the result list.
 * Otherwise, the function iterates over the letters mapped to the current digit and appends each letter to currentString. It then recursively calls itself with the next index. After the recursive call, it removes the last appended letter to backtrack and try the next letter.
 * This approach ensures that all possible combinations are generated by exploring each possible letter for every digit in the input string.
 */
object LetterCombinationOfPhoneNumber {
    val combinations = mapOf(
        '2' to listOf("a", "b", "c"),
        '3' to listOf("d", "e", "f"),
        '4' to listOf("g", "h", "i"),
        '5' to listOf("j", "k", "l"),
        '6' to listOf("m", "n", "o"),
        '7' to listOf("p", "q", "r", "s"),
        '8' to listOf("t", "u", "v"),
        '9' to listOf("w", "x", "y", "z"),
    )

    fun letterCombinations(digits: String): List<String> {
        if(digits.isEmpty()) {
            return emptyList()
        }

        val result = mutableListOf<String>()
        val currentString = StringBuilder()

        backtracking(result, currentString, digits, 0)

        return result
    }

    private fun backtracking(
        result: MutableList<String>,
        currentString: StringBuilder,
        digits: String,
        index: Int,
    ) {
        if(currentString.length == digits.length) {
            result.add(currentString.toString())
            return
        }

        for(letter in combinations[digits[index]]!!) {
            currentString.append(letter)
            backtracking(result, currentString, digits, index + 1)
            currentString.setLength(currentString.length - 1)
        }
    }
}
